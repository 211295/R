### 22/03/2023
### Model-fitting analyses  ###
### load packages:
if(!require(ape)){install.packages("ape");library(ape)}
if(!require(paleotree)){install.packages("paloetree");library(paleotree)}
if(!require(geiger)){install.pagckages("geiger");library(geiger)}
install.packages("ggplot2")

### set working directory and load files: 
setwd("C:/Users/HP/Documents/FELIPE/Estatistica e Programacao/Analise Filogenetica")

### Since we have already have time-scaled trees, let's import them, for example, we can import the "mbl trees" we created with "2) Regression" script:
trees<-dget(file = "croc tree, 20 trees, mbl method.txt")

### selecting the first 5 trees only (instead of all 20 trees, for making analyses faster)
five_trees <- trees[1:5] # Ideally, we should use many more trees (~100 trees)

### load data and inspect (using function "read.table()" with header TRUE):
croc_size <- read.table("croc_sizes.txt", header=TRUE)
str(croc_size) # 241 specimens
class(croc_size)
head(croc_size)
summary(croc_size)

### getting mean values for each species:
taxon.list <- unique(croc_size$Taxon)
print(taxon.list)
taxon.lengths <- c()
for(i in 1: length(taxon.list)) {taxon.lengths[i] <- mean(croc_size[croc_size$Taxon==taxon.list[i], "log_odcl"])}
names(taxon.lengths) <- taxon.list
taxon_croc_size <- taxon.lengths

### inspecting
str(taxon_croc_size) # 195 species
class(taxon_croc_size)
head(taxon_croc_size)

### Dropping taxa from the tree for which we do not have data
for (i in 1: length(five_trees)) {five_trees[[i]] <- dropPaleoTip(five_trees[[i]], five_trees[[i]]$tip.label[!(five_trees[[i]]$tip.label %in% names(taxon.lengths))])} 
### also a bit complicated.

### Comparing:
length(taxon_croc_size) # 195 taxa
Ntip(five_trees[[1]]) # 195 taxa

### Great! Now we can proceed with the analyses. AT NOW LEST DO MODEL-FITING

### In this script, we will only fit uniform models (in which parameters don't change along the tree/through time)
### the most commonly used function for fitting these simple models is "fitContinuous()", from package geiger
### take a look at the "Help" tab for this function
### there are many models | model = c("BM","OU","EB","rate_trend","lambda","kappa","delta","mean_trend","white"),

### let's fit the following 3 models: Brownian motion (BM), OU, and the trend (a BM with the trend parameter)

### for that, let's start creating a list with the models we want:
models <- c("BM","OU","mean_trend") # in geiger, the 'trend' model (as we understand it) is called 'mean_trend' (or 'drift', in older versions)

### now, for fitting the models, let's use loops and function "fitContinuous()":
results <- list() # creates an empty list for our results

### the following loops will start the analyses, but they can take some time, so be patient!
### let's measure how long it takes:

### Start the clock!:
start <- Sys.time()
### set.seed() function 
### start analyses: 
### the first part of the loop (for each tree - 5 trees in the current example)
### the second part of the loop (for each model)
### the "fitContinuous()" needs the data, the tree and the model, you can inspect in help
for(i in 1: length(five_trees)) {results[[i]] <- list()
  for(j in 1: length(models)) results[[i]][[j]] <- fitContinuous(five_trees[[i]], taxon_croc_size, model=models[[j]])} 
### Its take a time
### Stop the clock!:
end <- Sys.time()
### How long did it take?:
end - start # in my computer, it took

### Luckily, the function accepted our "new_data" object as 'numeric and run it smoothly
### some functions will only take data frames...
### also, if there are some warnings, it might be worth inspecting them, but they are usually okay...

### let's take a look at the results,too long
results
### inspecting
str(results)
class(results)
length(results) # 5, which means that there is one list **for each tree**

### Looking at the length of the first list (of the first tree):
length(results[[1]])  # 3, which means that there are 3 lists (one for each model) for each tree

### To make it easier, let's give names to the elements of the list, using the models
for(i in 1:length(results)) {names(results[[i]]) <- models}

### now, for each tree, we can use $ to check the results for each model:
results[[1]]$BM
results[[1]]$OU
results[[1]]$mean_trend

############################################################################
### Now we can get the AICc (scores for all models and all trees using the model names)(look for Regression tutorial):
### AICc scores:
### OU
OU_Aicc <- list()
for(i in 1:length(results)) {OU_Aicc[[i]] <- results[[i]]$OU$opt$aicc}

### BM
BM_Aicc <- list()
for(i in 1:length(results)) {BM_Aicc[[i]] <- results[[i]]$BM$opt$aicc}

### trend
trend_Aicc <- list()
for(i in 1:length(results)) {trend_Aicc[[i]] <- results[[i]]$mean_trend$opt$aicc}

### let's look at these objects we created with the AICc scores, it's means 
print(BM_Aicc) # this is a list of 5 AICc scores, one for each tree (using the BM model)
print(OU_Aicc) # the same for the OU model
print(trend_Aicc) # trend model

### Now, what we want is to compare the fit of different models for the same trees.
### A way of doing this is using boxplots to compare the AICc scores of all trees and models

### Let's create a data frame with the AICc scores for all models and all trees
AICc_total <- do.call(rbind, Map(data.frame, BM=BM_Aicc, OU=OU_Aicc, trend=trend_Aicc))
AICc_total

### Let's visualize the results using boxplots of the AICc scores
boxplot(AICc_total)
ggplot(AICc_total, aes(x=names, y=c(-70,-20))) + geom_violin(trim=TRUE)

### As I said, lower AICc scores indicate better fit. So, let's reverse the y axis:
boxplot(AICc_total, ylim=c(-70,-20))
ggplot(AICc_total, aes(x=names, y=c(-20,-70))) + geom_violin(trim=FALSE)

### Right. This plot shows that the OU model has better (ie. lower) AICc scores.The OU
### So, the OU model is the best (at least among the ones we tested), and can explain our data better
### As I said, ideally we should use many more trees ( ~100) to be more confident about this result
### But 5 trees was good for doing this exercise

### Now let's save the results
### First, the entire results of the model fitting analyses (with all the parameters and other stuff)
dput(results, file = "Results fitContinuous mbl, ODCL, croc_tree.txt")
### If want to import file results <- dget(file = "Results fitContinuous mbl, ODCL, croc_tree.txt")

### Now, just the AICc scores (if we want to compare them with other models latter, for example)
dput(AICc_total, file = "AICc scores mbl, ODCL, croc_tree.txt")
### If want to import file AICc_total<-dget(file = "AICc scores mbl, ODCL, croc_tree.txt")

##############################################################################

### Now it's on you!
### Exercise number 1

### Try to use the same data to fit a non-uniform model
### In this case, I think the easiest one is the non-uniform OU model fit called "SURFACE"
### there is a package called "surface" and also good documentation and an online tutorial

### obs: SURFACE analyses can take very, very long.
### So, maybe try fitting the model using only 2 trees (just to see if it works)

### Another cool option is using package OUwie, which also fits many non-uniform variations of the BM and the OU models
### Finally, another option is package MVmorph, also with variations of the BM and OU models.
### Give these packages a try!

### Any problem, just let me know!
